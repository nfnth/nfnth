<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - OBJLoader + MTLLoader</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		
	</head>

	<body>
		<div id="info">
		<a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> - OBJLoader + MTLLoader
		</div>

		<!-- Import maps polyfill -->
		<!-- Remove this when import maps will be widely supported -->

	  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/three.min.js"></script>
<script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/controls/OrbitControls.js"></script>
<script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/loaders/LoaderSupport.js"></script>
<script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/loaders/OBJLoader2.js"></script>
<script id="hljs" src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/loaders/MTLLoader.js"></script>
		
		<script src="https://unpkg.com/three"></script>
    <script
      src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/loaders/FBXLoader2.js"
      ></script>

		<script type="importmap">
			{
				"imports": {
					"three": "../build/three.module.js",
					"three/addons/": "./jsm/"
				}
			}
		</script>

		<script>

		//	import * as THREE from 'three';

			//import { MTLLoader } from 'three/addons/loaders/MTLLoader.js';
			//import { OBJLoader } from 'three/addons/loaders/OBJLoader.js';

			let camera, scene, renderer;

			let mouseX = 0, mouseY = 0;

			let windowHalfX = window.innerWidth / 2;
			let windowHalfY = window.innerHeight / 2;

var grab;
			
			
			function main() {
    // renderer                                                                 
    const renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setSize(800, 600);
    document.body.appendChild(renderer.domElement);

    // camera                                                                   
    const camera = new THREE.PerspectiveCamera(30, 800 / 600, 1, 10000);
    camera.position.set(0, 10, 100);
    camera.up.set(0, 1, 0);
    camera.lookAt(new THREE.Vector3(0, 0, 0));

    // scene and lights                                                         
    const scene = new THREE.Scene();
    scene.add(new THREE.AmbientLight(0xcccccc));

    // load fbx model and texture                                               
    const objs = [];
    const loader = new THREE.FBXLoader2();
    loader.load("room.fbx", model => {
        // model is a THREE.Group (THREE.Object3D)                              
        const mixer = new THREE.AnimationMixer(model);
        // animations is a list of THREE.AnimationClip                          
        mixer.clipAction(model.animations[0]).play();
        scene.add(model);
        objs.push({model, mixer});
    });

    // animation rendering                                                      
    const clock = new THREE.Clock();
    (function animate() {
        // animation with THREE.AnimationMixer.update(timedelta)                
        objs.forEach(({mixer}) => {mixer.update(clock.getDelta());});
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
    })();
    return objs;
}
const objs = main();
			
			
			
function startup() { alert('go'); init();
			animate(); }

			function init() {

				const container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.z = 250;

				// scene

				scene = new THREE.Scene();

				const ambientLight = new THREE.AmbientLight( 0xcccccc, 0.4 );
				scene.add( ambientLight );

				const pointLight = new THREE.PointLight( 0xffffff, 0.8 );
				camera.add( pointLight );
				scene.add( camera );

				// model

				const onProgress = function ( xhr ) {

					if ( xhr.lengthComputable ) {

						const percentComplete = xhr.loaded / xhr.total * 100;
						console.log( Math.round( percentComplete, 2 ) + '% downloaded' );

					}

				};
				
				const objLoader = new THREE.OBJLoader2();
    objLoader.loadMtl('Living_room_obj.mtl', null, (materials) => {
      objLoader.setMaterials(materials);
      objLoader.load('Living_room_obj.obj', (event) => {const root = event.detail.loaderRootNode;scene.add(root); });
    });

				

				/* new MTLLoader()
					.setPath( 'room/' )
					.load( 'room.mtl', function ( materials ) {

						materials.preload();

						new OBJLoader()
							.setMaterials( materials )
							.setPath( 'room/' )
							.load( 'room.obj', function ( object ) {

								object.position.y = - 95;
								scene.add( object );

							}, onProgress );

					} );
*/
				//

				renderer = new THREE.WebGLRenderer();
				renderer.outputEncoding = THREE.sRGBEncoding;
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

				document.addEventListener( 'mousemove', onDocumentMouseMove );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				//camera.aspect = window.innerWidth / window.innerHeight;
				camera.aspect = 2;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove( event ) {

				mouseX = ( event.clientX - windowHalfX ) / 2;
				mouseY = ( event.clientY - windowHalfY ) / 2;

			}

			//

			function animate() {

				requestAnimationFrame( animate );
				render();

			}

			function render() {

				//camera.position.x += ( mouseX - camera.position.x ) * .45; //.05;
				//camera.position.y += ( - mouseY - camera.position.y ) * .45; //.05;


//camera.position.set(
//	camera.position.x * 2,
//	camera.position.y * 2,
//	camera.position.z * 2,
//	);
				
				
				
				

				camera.lookAt( scene.position );

				renderer.render( scene, camera );

			}


		</script>
<button onclick="startup();">Start Here</button>
	</body>
</html>
